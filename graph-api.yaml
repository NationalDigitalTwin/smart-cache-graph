#
# Copyright (C) 2024 Telicent Limited
#
openapi: 3.0.3
info:
  title: Graph Smart-Cache API
  description: |
    OpenAPI Specification for interacting with the Telicent Smart-Cache Graph Server.
    
    **Note:** This description is obviously configuration dependent with the endpoints below being enabled/disabled as the relevant deployment requires.
  version: 0.82.8
servers:
  - url: http://localhost:3030
    description: Local Fuseki server instance
paths:
  /{dataset}/query:
    get:
      summary: Execute a SPARQL Query
      description: |
        Submit a SPARQL query against a dataset. 
        
        **Note:** Depending on configuration there can be equivalent /get /read or /sparql endpoints with identical functionality.
      parameters:
        - $ref: '#/components/parameters/dataset'
        - $ref: '#/components/parameters/sparqlQuery'
      responses:
        200:
          description: Query executed successfully.
        400:
          description: Invalid query or bad request.
        401:
          description: Unauthorised query.
        404:
          description: Endpoint not found i.e. incorrect dataset.
        500:
          description: Internal Server Error i.e. the server failed to process the request.
        503:
          description: Service Unavailable, i.e. the server is still in the process of starting.
  /{dataset}/update:
    post:
      summary: Execute a SPARQL Update
      description: | 
        Submit a SPARQL update against a dataset and, by means of the RDF Patches generated, also update the other Smart Caches.
      parameters:
        - $ref: '#/components/parameters/dataset'
      requestBody:
        required: true
        content:
          application/sparql-update:
            schema:
              type: string
              description: SPARQL Update query string.
      responses:
        200:
          description: Update executed successfully.
        400:
          description: Invalid query or bad request.
        401:
          description: Unauthorised query.
        404:
          description: Endpoint not found i.e. incorrect dataset.
        500:
          description: Internal Server Error i.e. the server failed to process the request.
        503:
          description: Service Unavailable, i.e. the server is still in the process of starting.
  /{dataset}/shacl:
    post:
      summary: Validate RDF data against SHACL shapes
      description: |
        Submit RDF data and SHACL shapes to validate the data. 
        The server processes the request and returns a SHACL validation report.
      parameters:
        - $ref: '#/components/parameters/dataset'
        - $ref: '#/components/parameters/graph'
        - $ref: '#/components/parameters/target'
      requestBody:
        description: RDF data and SHACL shapes to validate.
        required: true
        content:
          text/turtle:
            schema:
              type: string
              description: RDF data and SHACL shapes in Turtle format.
      responses:
        200:
          description: Validation report generated successfully.
          content:
            text/turtle:
              schema:
                $ref: '#/components/schemas/ValidationReport'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ValidationReport'
        400:
          description: Invalid input data or SHACL shapes.
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error.
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{dataset}/graphql:
    get:
      summary: Execute a GraphQL query
      description: | 
        Execute a GraphQL query against the schema associated with the specified dataset.
        The supported GraphQL schema is configuration-dependent and may vary between datasets.
        Users can use GraphQL introspection queries to explore and examine the available schema for the dataset,
        enabling them to understand the structure and capabilities of the API.
      parameters:
        - $ref: '#/components/parameters/dataset'
        - $ref: '#/components/parameters/graphQLQuery'
        - $ref: '#/components/parameters/operationName'
        - $ref: '#/components/parameters/variables'
        - $ref: '#/components/parameters/extensions'
      responses:
        '200':
          $ref: '#/components/responses/GraphQLSuccess'
        '400':
          $ref: '#/components/responses/GraphQLError'
    post:
      summary: Execute a GraphQL query against the Dataset schema (POST)
      parameters:
        - $ref: '#/components/parameters/dataset'
      requestBody:
        $ref: '#/components/requestBodies/GraphQLRequest'
      responses:
        '200':
          $ref: '#/components/responses/GraphQLSuccess'
        '400':
          $ref: '#/components/responses/GraphQLError'

  /{dataset}/traversal/graphql:
      get:
        summary: Execute a GraphQL query against the Traversal schema
        parameters:
          - $ref: '#/components/parameters/dataset'
          - $ref: '#/components/parameters/graphQLQuery'
          - $ref: '#/components/parameters/operationName'
          - $ref: '#/components/parameters/variables'
          - $ref: '#/components/parameters/extensions'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'
      post:
        summary: Execute a GraphQL query against the Traversal schema (POST)
        parameters:
          - $ref: '#/components/parameters/dataset'
        requestBody:
          $ref: '#/components/requestBodies/GraphQLRequest'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'

  /{dataset}/validate:
      get:
        summary: Validate a GraphQL query against the Dataset schema
        parameters:
          - $ref: '#/components/parameters/dataset'
          - $ref: '#/components/parameters/graphQLQuery'
          - $ref: '#/components/parameters/operationName'
          - $ref: '#/components/parameters/variables'
          - $ref: '#/components/parameters/extensions'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'
      post:
        summary: Validate a GraphQL query against the Dataset schema (POST)
        parameters:
          - $ref: '#/components/parameters/dataset'
        requestBody:
          $ref: '#/components/requestBodies/GraphQLRequest'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'

  /{dataset}/traversal/validate:
      get:
        summary: Validate a GraphQL query against the Traversal schema
        parameters:
          - $ref: '#/components/parameters/dataset'
          - $ref: '#/components/parameters/graphQLQuery'
          - $ref: '#/components/parameters/operationName'
          - $ref: '#/components/parameters/variables'
          - $ref: '#/components/parameters/extensions'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'
      post:
        summary: Validate a GraphQL query against the Traversal schema (POST)
        parameters:
          - $ref: '#/components/parameters/dataset'
        requestBody:
          $ref: '#/components/requestBodies/GraphQLRequest'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'

  /{dataset}/telicent/graphql:
      get:
        summary: Execute a GraphQL query against the Telicent schema
        parameters:
          - $ref: '#/components/parameters/dataset'
          - $ref: '#/components/parameters/graphQLQuery'
          - $ref: '#/components/parameters/operationName'
          - $ref: '#/components/parameters/variables'
          - $ref: '#/components/parameters/extensions'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'
      post:
        summary: Execute a GraphQL query against the Telicent schema (POST)
        parameters:
          - $ref: '#/components/parameters/dataset'
        requestBody:
          $ref: '#/components/requestBodies/GraphQLRequest'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'

  /{dataset}/telicent/validate:
      get:
        summary: Validate a GraphQL query against the Telicent schema
        parameters:
          - $ref: '#/components/parameters/dataset'
          - $ref: '#/components/parameters/graphQLQuery'
          - $ref: '#/components/parameters/operationName'
          - $ref: '#/components/parameters/variables'
          - $ref: '#/components/parameters/extensions'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'
      post:
        summary: Validate a GraphQL query against the Telicent schema (POST)
        parameters:
          - $ref: '#/components/parameters/dataset'
        requestBody:
          $ref: '#/components/requestBodies/GraphQLRequest'
        responses:
          '200':
            $ref: '#/components/responses/GraphQLSuccess'
          '400':
            $ref: '#/components/responses/GraphQLError'

components:
  securitySchemes:
    BearerAuth:
      description: Generic Bearer Authentication is supported using JWTs
      type: http
      scheme: bearer
      bearerFormat: JWT
    AwsBearerAuth:
      description: |
        For AWS usage we support JWTs that are injected into requests by the ELB.  
        Since these come in a non-standard HTTP header we have to declare this as
        an API Key scheme in OpenAPI spec as it doesn't have a notion of using a
        HTTP scheme in a non-standard way (yay AWS weirdness!)
      type: apiKey
      in: header
      name: X-Amzn-Oidc-Data
  parameters:
      dataset:
        name: dataset
        in: path
        required: true
        schema:
          type: string
        description: The underlying dataset (i.e. Graph) to apply requests against.
      graph:
        name: graph
        in: query
        required: false
        schema:
          type: string
      target:
        name: target
        in: query
        required: false
        schema:
          type: string
      graphQLQuery:
          name: query
          in: query
          required: true
          schema:
            type: string
          description: The GraphQL query string.
      sparqlQuery:
          name: query
          in: query
          required: true
          schema:
            type: string
          description: The SPARQL query string.
      operationName:
        name: operationName
        in: query
        required: false
        schema:
          type: string
        description: Name of the operation to execute (optional).
      variables:
        name: variables
        in: query
        required: false
        schema:
          type: string
          description: JSON-encoded variables for the query (optional).
      extensions:
        name: extensions
        in: query
        required: false
        schema:
          type: string
        description: Extensions for the GraphQL request (optional).

  requestBodies:
      GraphQLRequest:
        description: GraphQL request payload.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                operationName:
                  type: string
                variables:
                  type: object
                extensions:
                  type: object
              required:
                - query

  responses:
      GraphQLSuccess:
        description: Successful response containing query results.
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
      GraphQLError:
        description: Error response for invalid GraphQL requests, adhering to the GraphQL error specification.
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  description: A list of errors encountered during query execution.
                  items:
                    type: object
                    properties:
                      message:
                        type: string
                        description: A human-readable description of the error.
                      locations:
                        type: array
                        description: A list of locations in the request document associated with the error.
                        items:
                          type: object
                          properties:
                            line:
                              type: integer
                              description: Line number in the request document where the error occurred.
                            column:
                              type: integer
                              description: Column number in the request document where the error occurred.
                      path:
                        type: array
                        description: A path to the field that caused the error.
                        items:
                          type: string
                      extensions:
                        type: object
                        description: Additional metadata about the error, as provided by the server.
              required:
                - errors

  schemas:
    ValidationReport:
      type: string
      description: Validation report returned in RDF form, serialized as a string in Turtle format.
      example: |
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX sh: <http://www.w3.org/ns/shacl#>
        [
          rdf:type sh:ValidationReport ;
          sh:conforms true
        ] .
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: Type of the error.
        title:
          type: string
          description: Title describing the error.
        status:
          type: integer
          description: HTTP status code of the error.
        detail:
          type: string
          description: Detailed error message.
security:
  - BearerAuth: []
  - AwsBearerAuth: []
